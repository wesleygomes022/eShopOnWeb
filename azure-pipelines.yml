# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  name: 'wgomesAgent'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  environmentName: 'eShopOnWeb-DEV'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Nuget Restore'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'
        vstsFeed: '6a56f8d0-da8a-4f62-978a-07240981baed'  
#    - task: VSBuild@1
#      displayName: 'Building the Application' 
#      inputs:
#        solution: '$(solution)'
#        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#        platform: '$(buildPlatform)'
#        configuration: '$(buildConfiguration)'  

    #- task: SonarQubePrepare@5
    #  displayName: "Prepare Analysis Configuration"
    #  inputs:
    #    SonarQube: 'SonarQube'
    #    scannerMode: 'MSBuild'
    #    projectKey: 'bb131a42ff076475e3f6df9cd5ee31d21eabbfcc'
    #    projectName: 'eShopOnWeb'

    - task: DotNetCoreCLI@2
      displayName: 'Build Application'
      inputs:
        command: 'build'
        projects: $(solution)
        arguments: '--configuration $(buildConfiguration) /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
         
    #- task: SonarQubeAnalyze@5 
    #  displayName: "Run Code Analysis"

    #- task: SonarQubePublish@5
    #  displayName: "Publish Quality Result"
    #  inputs:
    #    pollingTimeoutSec: '300'

    - task: CopyFiles@2
      displayName: copiando dll testes interface p/ a folder
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/tests/InterfaceTests/bin/$(buildConfiguration)/net5.0/'
        Contents: '*.*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/InterfaceTestsDLL/'

    - task: CopyFiles@2
      displayName: 'Copying the Arm template files to Artifacts folder'
      inputs:
        SourceFolder: 'ArmTemplate/'
        Contents: 'azuredeploy*.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/**/UnitTests.csproj'
        arguments: '--no-build --collect "Code coverage" --configuration $(buildconfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Publishing Artifacts'
      inputs:
        command: 'publish'
        publishWebProjects: true 
        projects: '$(solution)'
        zipAfterPublish: True  
    - task: PublishBuildArtifacts@1
      displayName: 'Pushing Artifacts to Azure DevOps'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'